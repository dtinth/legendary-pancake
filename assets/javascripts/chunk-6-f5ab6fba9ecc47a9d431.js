webpackJsonp([6],{130:function(e,t){e.exports="<h1>legendary-pancake.config.js</h1> <p>The <code>legendary-pancake.config.js</code> file is read by the <code>legendary-pancake</code> CLI tool and is used to configure webpack.</p> <p>It should export a configuration object, which may contain these members:</p> <h2>configureWebpack(config, pancake)</h2> <p>legendary-pancake will use this function to let you customize the webpack config. It will be given these arguments:</p> <ul> <li> <p><code>config</code> The base webpack configuration. You can mutate this object directly to modify the configuration.</p> </li> <li> <p><code>pancake</code> An object with renderContext information about the build, as well as some renderContext helpers.</p> </li> </ul> <p>It should return the modified webpack configuration.</p> <h3 id=config-pancake>pancake</h3> <p>The <code>pancake</code> object has these properties:</p> <ul> <li> <p><code>webpack</code> The webpack module (<code>require('webpack')</code>).</p> </li> <li> <p><code>env</code> A string representing the build target.</p> <ul> <li><code>&quot;development&quot;</code> when running the development server</li> <li><code>&quot;prerenderer&quot;</code> when building the prerenderer</li> <li><code>&quot;production&quot;</code> when building the production page</li> </ul> </li> <li> <p><code>css(loader)</code> adapts css-loader for hot-reloading (development) and extraction into a separate CSS file (build). See <a href=css.md>CSS</a> page for more details.</p> </li> </ul> <h2>basePathname</h2> <p>By default, legendary-pancake builds your page expecting that it will be hosted on the root path.</p> <p>If that’s not the case, you need to configure <code>basePathname</code> to point to the pathname where your web pages will be hosted.</p> <p>Usually, this should be the same as <code>config.output.publicPath</code> in webpack configuration.</p> <h2>splitPages</h2> <p>Configures whether legendary-pancake should build the HTML files into a different folder from the assets folder.</p> <ul> <li> <p>If <code>false</code> (default), the HTML pages will be saved to <code>build/browser</code>.</p> <p>This is the same directory as the assets. This means you can upload this directory to a static web host immediately.</p> </li> <li> <p>If <code>true</code>, the HTML pages will be saved to <code>build/pages</code> instead.</p> <p>This is useful in case the HTML files should be served by a different server, which allows for (e.g.) A/B testing and <a href=https://en.wikipedia.org/wiki/Content_negotiation>content negotiation</a>.</p> </li> </ul> <h2>developmentTemplateFile</h2> <p>Specifies the template file to use when running the development server. This template will be passed to <a href=https://github.com/ampedandwired/html-webpack-plugin>HtmlWebpackPlugin</a>. Defaults to <code>./src/dev.html</code>.</p> <h2>browserEntryFile</h2> <p>Specifies the file to be used as browser entry point. Defaults to <code>./src/browser.js</code>.</p> <h2>prerendererEntryFile</h2> <p>Specifies the file to be used as prerenderer. Defaults to <code>./src/prerenderer.js</code>.</p> <h1>Browser API</h1> <p>Require <code>legendary-pancake</code> to access this API. It provides these members:</p> <ul> <li> <p><a href=#createRenderer><strong>createRenderer</strong></a></p> <p>Creates a renderer for use in browser.</p> </li> <li> <p><a href=https://github.com/ReactTraining/react-router/blob/v3.0.0/docs/API.md#link><strong>Link</strong></a></p> <p>The Link component from React Router.</p> </li> <li> <p><a href=#LoadingStateContainer><strong>LoadingStateContainer</strong></a></p> <p>A component that allows you to display a loading indicator.</p> </li> </ul> <h1>Prerenderer API</h1> <p>An API to help you create a prerenderer that can be used with <code>legendary-pancake</code> build command. It exports these members:</p> <ul> <li> <p><a href=#createPrerenderer><strong>createPrerenderer</strong></a></p> <p>Creates an instance of a prerenderer.</p> </li> <li> <p><a href=#defaultRenderRedirectPage><strong>defaultRenderRedirectPage</strong></a></p> </li> </ul> <h1 id=createRenderer>createRenderer(pages, options)</h1> <p>Creates a renderer object that can render the provided pages into the DOM.</p> <ul> <li> <p><code>pages</code> A mapping from pathname to a page function.</p> </li> <li> <p><code>options</code> An <a href=#RendererOptions>RendererOptions</a> object.</p> </li> </ul> <p>Returns a <a href=#Renderer>Renderer</a>.</p> <h2 id=RendererOptions>RendererOptions</h2> <h3>renderPage(page)</h3> <p>This function will be called prior to rendering the page. It will receive the page content (a React node) and should return what should be rendered (a React node).</p> <p>Default is an identity function. But you can customize this function if you want to add contexts.</p> <h3>onLocationChange(location)</h3> <p>This function will be called when the location changes. Useful for tracking analytic pageviews.</p> <p>Default is a no-op function.</p> <h3>shouldUpdateScroll(prevPathname, nextPathname)</h3> <p>This function will be called when the route changed. If it returns <code>true</code>, the page will be scrolled to the top. Useful for custom scroll behaviours on page change.</p> <p>Default is a function that always returns true.</p> <h2 id=Renderer>Renderer</h2> <p>Created by <a href=#createRenderer>createRenderer</a>().</p> <h3>renderTo(container)</h3> <p>Renders the static site into the DOM.</p> <ul> <li><code>container</code> A DOM element to render the site to.</li> </ul> <p>It will load the first page content before mounting the React Router.</p> <p>Wait for manager to be ready…</p> <h3>createHotReloadHandler(getPages)</h3> <p>Creates a hot reload handler suitable for using with <code>module.hot.accept</code>.</p> <p>See <a href=./getting-started.md>Getting Started</a> guide for example.</p> <h1 id=createPrerenderer>createPrerenderer(pages, options)</h1> <p>Creates a prerenderer object that can render the provided pages into static website.</p> <ul> <li> <p><code>pages</code> A mapping from pathname to a page function.</p> </li> <li> <p><code>options</code> An <a href=#PrerendererOptions>PrerendererOptions</a> object.</p> </li> </ul> <p>Returns a Prerenderer. It will be used by <code>legendary-pancake build</code> command.</p> <h2 id=PrerendererOptions>PrerendererOptions</h2> <h3>renderPage(content, renderContext)</h3> <p><strong>Required.</strong> This funtion will be called during the build process to generate your content pages. It will receive these arguments:</p> <ul> <li> <p><code>content</code> The page content (a React node).</p> </li> <li> <p><code>renderContext</code> A RenderContext that provides additional information required to build the page.</p> </li> </ul> <p>It should return a RenderedPage.</p> <h3>renderRedirectPage(targetPathname, renderContext)</h3> <p>This funtion will be called during the build process to generate a redirect file. It will receive these arguments:</p> <ul> <li> <p><code>targetPathname</code> The string representing the redirection target pathname.</p> </li> <li> <p><code>renderContext</code> A RenderContext that provides additional information required to build the page.</p> </li> </ul> <p>It should return a RenderedPage.</p> <h2>RenderContext</h2> <p>A RenderContext contains additional information required to build the static version of this web page.</p> <h3>pathname</h3> <p>A string representing the pathname being built.</p> <h3>stylesheets</h3> <p>An array representing a list of stylesheet objects. Each object contains <code>url</code> and <code>content</code> properties.</p> <h3>javascripts</h3> <p>An array representing a list of JavaScript files. Each object contains <code>url</code> and <code>content</code> properties.</p> <h3>stats</h3> <p>Webpack stats object.</p> <h1>defaultRenderRedirectPage</h1> <p>A default implementation of renderRedirectPage option used in <a href=#PrerendererOptions>PrerendererOptions</a>.</p> <h1 id=LoadingStateContainer>LoadingStateContainer</h1> <p>A React component that lets you render a loading indicator.</p> <p>It takes the following props:</p> <ul> <li><code>renderContent(loading)</code> This prop will be called with a boolean value <code>loading</code> and should return the thing that this component should render.</li> </ul> "}});