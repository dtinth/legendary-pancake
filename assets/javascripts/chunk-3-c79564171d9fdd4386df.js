webpackJsonp([3],{133:function(e,r){e.exports="<h1>How it really works</h1> <p>Now, letâ€™s learn how legendary-pancake prerenders your web site.</p> <h2>Building static pages</h2> <p>When you run <code>legendary-pancake build</code>,</p> <ol> <li> <p>It cleans the <code>build</code> directory.</p> </li> <li> <p>It uses webpack to generate two bundles:</p> <ul> <li> <p><strong>The browser bundle.</strong> It will be run by the client.</p> <ul> <li> <p>Generate a bundle from <code>src/browser.js</code>.</p> </li> <li> <p>Extract CSS using ExtractTextPlugin.</p> </li> <li> <p>Minify the code using UglifyPlugin.</p> </li> <li> <p>Save the assets into <code>build/browser</code> folder.</p> </li> </ul> </li> <li> <p><strong>The prerendering bundle.</strong> This bundle contains the logic to generate static HTML files from your project.</p> <ul> <li> <p>Generate a bundle from <code>src/prerenderer.js</code>, targeting Node.js.</p> </li> <li> <p>Save the assets into <code>build/prerenderer</code> folder.</p> </li> </ul> </li> </ul> </li> <li> <p>It prerenders the pages.</p> <ul> <li> <p>It requires the prerenderer bundle.</p> </li> <li> <p>It asks the prerenderer for the list of available pages that needs to be renderered.</p> </li> <li> <p>For each route, it asks the prerenderer to render it.</p> </li> <li> <p>The results are saved to <code>build/browser</code>.</p> </li> </ul> </li> </ol> "}});