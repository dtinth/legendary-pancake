webpackJsonp([5],{131:function(e,s){e.exports="<p>This page assumes that you have a working legendary-pancake website now. Now we’ll learn how to add CSS to your page.</p> <h1>Adding loaders</h1> <p>First, we’ll need to teach legendary-pancake to treat certain files as CSS. For the sake of example, we’ll write our stylesheet using <a href=http://lesscss.org/ >Less.js</a>.</p> <h2>Install the dependencies</h2> <p>Let’s install these dependencies:</p> <pre><code class=language-bash>yarn add --dev less less-loader css-loader\n</code></pre> <blockquote> <p><code>less-loader</code> uses <code>less</code> to transform Less code into CSS.</p> <p><code>css-loader</code> resolves imports and urls referenced in the CSS code.</p> <p><strong>Don’t install</strong> <code>style-loader</code> because legendary-pancake has an alternative.</p> </blockquote> <h2>Configure the loaders</h2> <p>Add this to your <code>configureWebpack</code> function:</p> <pre><code class=language-js>  config.module.loaders.push({\n    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.less$/</span>,\n    <span class=hljs-attr>loader</span>: pancake.css(<span class=hljs-string>'css-loader!less'</span>)\n  })\n</code></pre> <p>We used a helper, <code>pancake.css</code>, to load the CSS in an appropriate way.</p> <ul> <li> <p>During development, CSS is loaded using <code>style-loader</code>.</p> </li> <li> <p>During build, the CSS is extracted using ExtractTextPlugin and saved into a CSS file. The extracted CSS file will be available inside <code>renderContext.stylesheets</code> during prerendering.</p> </li> </ul> "}});