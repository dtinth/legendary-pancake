webpackJsonp([4],{132:function(s,a){s.exports='<p>This document will guide you through setting up <code>legendary-pancake</code>.</p> <p>As I’ve probably said before, legendary-pancake is an <strong><em>advanced</em></strong> tool; it doesn’t try to shield you away from the intricacies of webpack. While this means it will take some time to set up a project, it gives you a lot of flexibility (see the Intro page).</p> <p>Therefore, this guide assumes knowledge of configuring webpack, using loaders and doing code splitting.</p> <h1>Setting up the project</h1> <p>Create an empty directory for your website:</p> <pre><code class=language-bash>mkdir my-site\n<span class=hljs-built_in>cd</span> my-site\n</code></pre> <p>Inside it we will create a directory to hold our site’s source code:</p> <pre><code class=language-bash>mkdir src\n</code></pre> <p>Initialize a package:</p> <pre><code class=language-bash>yarn init -y\n</code></pre> <p>Install legendary-pancake into the project:</p> <pre><code class=language-bash>yarn add --dev legendary-pancake\n</code></pre> <h2>Set up command-line scripts</h2> <p>Modify <code>package.json</code> to add these scripts:</p> <pre><code class=language-js>  <span class=hljs-string>"scripts"</span>: {\n    <span class=hljs-string>"start"</span>: <span class=hljs-string>"legendary-pancake server"</span>,\n    <span class=hljs-string>"build"</span>: <span class=hljs-string>"legendary-pancake build"</span>,\n    <span class=hljs-string>"clean"</span>: <span class=hljs-string>"legendary-pancake clean"</span>\n  }\n</code></pre> <p>This allows us to run <code>legendary-pancake</code> easily.</p> <h2>Babel</h2> <p>Since we’re going to use React and JSX, we have to transpile our JSX (and ES2016) code into normal JavaScript. We’ll use Babel:</p> <pre><code class=language-bash>yarn add --dev \\\n  babel-core \\\n  babel-loader \\\n  babel-preset-es2015 \\\n  babel-preset-es2016 \\\n  babel-preset-stage-2 \\\n  babel-preset-react\n</code></pre> <p>Then we configure Babel by creating a <code>.babelrc</code> file:</p> <pre><code class=language-js>{\n  <span class=hljs-string>"presets"</span>: [\n    <span class=hljs-string>"es2015"</span>,\n    <span class=hljs-string>"es2016"</span>,\n    <span class=hljs-string>"stage-2"</span>,\n    <span class=hljs-string>"react"</span>\n  ]\n}\n</code></pre> <h2>React</h2> <p>Next, we need to install React and React DOM to our project:</p> <pre><code class=language-bash>yarn add react react-dom\n</code></pre> <p>Now we have all the dependencies we need for this getting started guide.</p> <h1>Configuration</h1> <p>Now, it is time to configure legendary-pancake to build us a simple website.</p> <h2>legendary-pancake</h2> <p>Next, we create a <code>legendary-pancake.config.js</code> file and tell it to load our JavaScript files (in <code>src</code> directory) using <code>babel-loader</code>.</p> <pre><code class=language-js><span class=hljs-meta>\'use strict\'</span>\n<span class=hljs-keyword>const</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>\'path\'</span>)\n\nexports.configureWebpack = <span class=hljs-function>(<span class=hljs-params>config, pancake</span>) =&gt;</span> {\n  <span class=hljs-comment>// Babel</span>\n  config.module.loaders.push({\n    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.js$/</span>,\n    <span class=hljs-attr>include</span>: path.join(__dirname, <span class=hljs-string>\'src\'</span>),\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>\'babel-loader\'</span>\n  })\n  <span class=hljs-keyword>return</span> config\n}\n</code></pre> <p>We defined a <code>configureWebpack</code> function, which will be given a webpack configuration object. This function should return a modified webpack configuration.</p> <blockquote> <p>Since the configuration module is simply a JavaScript file, you may create a shared configuration and put it on (e.g.) npm so that your projects can re-use this configuration.</p> </blockquote> <h2>Define pages</h2> <p>Next, we’ll define our pages.</p> <p>Add this to <code>src/pages.js</code>:</p> <pre><code class=language-js><span class=hljs-keyword>import</span> React <span class=hljs-keyword>from</span> <span class=hljs-string>\'react\'</span>\n<span class=hljs-keyword>import</span> { Link } <span class=hljs-keyword>from</span> <span class=hljs-string>\'legendary-pancake\'</span>\n<span class=hljs-keyword>import</span> Layout <span class=hljs-keyword>from</span> <span class=hljs-string>\'./Layout\'</span>\n\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  <span class=hljs-string>\'/\'</span>: <span class=hljs-function>(<span class=hljs-params>callback</span>) =&gt;</span> {\n    callback(<span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>Layout</span>&gt;</span>Home page<span class=hljs-tag>&lt;/<span class=hljs-name>Layout</span>&gt;</span></span>)\n  },\n  <span class=hljs-string>\'/about/\'</span>: <span class=hljs-function>(<span class=hljs-params>callback</span>) =&gt;</span> {\n    callback(<span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>Layout</span>&gt;</span>About page<span class=hljs-tag>&lt;/<span class=hljs-name>Layout</span>&gt;</span></span>)\n  },\n  <span class=hljs-string>\'/contact/\'</span>: <span class=hljs-function>(<span class=hljs-params>callback</span>) =&gt;</span> {\n    callback(<span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>Layout</span>&gt;</span>Contact page<span class=hljs-tag>&lt;/<span class=hljs-name>Layout</span>&gt;</span></span>)\n  },\n  <span class=hljs-string>\'/404.html\'</span>: <span class=hljs-function>(<span class=hljs-params>callback</span>) =&gt;</span> {\n    callback(<span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>Layout</span>&gt;</span>Contact page<span class=hljs-tag>&lt;/<span class=hljs-name>Layout</span>&gt;</span></span>)\n  }\n}\n</code></pre> <p>We defined our pages by exporting an object whose keys are pathnames, and whose values are functions. These functions should take a callback and calls it with the page’s content.</p> <blockquote> <p>The pathname <code>/404.html</code> is special, because it will be used when the requested pathname is not found.</p> </blockquote> <blockquote> <p>It is important to <strong>always</strong> end a pathname with <code>.html</code> or <code>/</code>, because otherwise, you may not be able to host the resulting site on a static file server! (such as GitHub pages)</p> </blockquote> <h2>The Layout</h2> <p>Create <code>src/Layout.js</code>; it is used by <code>pages.js</code> (above):</p> <pre><code class=language-js><span class=hljs-keyword>import</span> React <span class=hljs-keyword>from</span> <span class=hljs-string>\'react\'</span>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>Layout</span> (<span class=hljs-params>{ children }</span>) </span>{\n  <span class=hljs-keyword>return</span> (\n    <span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>nav</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>ul</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>Link</span> <span class=hljs-attr>to</span>=<span class=hljs-string>\'/\'</span>&gt;</span>Home<span class=hljs-tag>&lt;/<span class=hljs-name>Link</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>Link</span> <span class=hljs-attr>to</span>=<span class=hljs-string>\'/about/\'</span>&gt;</span>About<span class=hljs-tag>&lt;/<span class=hljs-name>Link</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n          <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>Link</span> <span class=hljs-attr>to</span>=<span class=hljs-string>\'/contact/\'</span>&gt;</span>Contact<span class=hljs-tag>&lt;/<span class=hljs-name>Link</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n      <span class=hljs-tag>&lt;/<span class=hljs-name>nav</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>main</span>&gt;</span>\n        {children}\n      <span class=hljs-tag>&lt;/<span class=hljs-name>main</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span></span>\n  )\n}\n</code></pre> <h2>Development template</h2> <p>Next, create an HTML template file, <code>src/dev.html</code>.</p> <pre><code class=language-html><span class=hljs-meta>&lt;!DOCTYPE html&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>html</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>head</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>charset</span>=<span class=hljs-string>"UTF-8"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>name</span>=<span class=hljs-string>"viewport"</span> <span class=hljs-attr>content</span>=<span class=hljs-string>"width=device-width, initial-scale=1.0"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>http-equiv</span>=<span class=hljs-string>"X-UA-Compatible"</span> <span class=hljs-attr>content</span>=<span class=hljs-string>"ie=edge"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>title</span>&gt;</span>legendary-pancake development mode<span class=hljs-tag>&lt;/<span class=hljs-name>title</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>head</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>body</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>"app"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>body</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>html</span>&gt;</span>\n</code></pre> <p>This is called a “development template” because it is only used during development. This file will be served by the development server.</p> <blockquote> <p>You don’t need to include any <code>&lt;script&gt;</code> tags, because [HtmlPlugin][html-webpack-plugin] will inject the appropriate <code>&lt;script&gt;</code> tags into the template.</p> </blockquote> <p>We will use another kind of template when we build the site into HTML files. It is a good idea to keep these templates as small as possible.</p> <h2>Browser entry point</h2> <p>Next, we will create an entry point for the browser, <code>src/browser.js</code>.</p> <pre><code class=language-js><span class=hljs-keyword>import</span> { createRenderer } <span class=hljs-keyword>from</span> <span class=hljs-string>\'legendary-pancake\'</span>\n<span class=hljs-keyword>import</span> pages <span class=hljs-keyword>from</span> <span class=hljs-string>\'./pages\'</span>\n\n<span class=hljs-keyword>const</span> renderer = createRenderer(pages)\nrenderer.renderTo(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\'app\'</span>))\n\n<span class=hljs-keyword>if</span> (<span class=hljs-built_in>module</span>.hot) {\n  <span class=hljs-keyword>const</span> onHotReload = renderer.createHotReloadHandler(<span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> <span class=hljs-built_in>require</span>(<span class=hljs-string>\'./pages\'</span>).default)\n  <span class=hljs-built_in>module</span>.hot.accept(<span class=hljs-string>\'./pages\'</span>, onHotReload)\n}\n</code></pre> <p>This file will be run on the client when user loads the page.</p> <blockquote> <p>The renderer returned by the <code>createRenderer</code> function will take care of rendering your pages according to the routes you defined earlier.</p> </blockquote> <h2>Running the development server</h2> <p>All the basic configuration has been set up. Now it’s time to run the development server! Run this command:</p> <pre><code class=language-bash>npm start\n</code></pre> <p>If the build is successful, you should see something like this in the Terminal:</p> <pre><code>* Preview <span class=hljs-string>at:</span> <span class=hljs-string>http:</span><span class=hljs-comment>//localhost:9000/</span>\nwebpack built <span class=hljs-number>55309105e99</span>f2d88fbe8 <span class=hljs-keyword>in</span> <span class=hljs-number>2500</span>ms\n</code></pre> <p>Open that URL, then you should be able to navgiate around the site. You can edit any file, and you will also see your changes hot-reloaded.</p> <h2>Creating a prerenderer</h2> <p>Now, to build this site into static HTML files, we need to create a prerenderer.</p> <p>Create <code>src/prerenderer.js</code>:</p> <pre><code class=language-js><span class=hljs-keyword>import</span> ReactDOMServer <span class=hljs-keyword>from</span> <span class=hljs-string>\'react-dom/server\'</span>\n<span class=hljs-keyword>import</span> { createPrerenderer } <span class=hljs-keyword>from</span> <span class=hljs-string>\'legendary-pancake/prerenderer\'</span>\n\n<span class=hljs-keyword>import</span> pages <span class=hljs-keyword>from</span> <span class=hljs-string>\'./pages\'</span>\n\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>const</span> prerenderer = createPrerenderer(pages, {\n  renderPage (content, renderContext) {\n    <span class=hljs-keyword>const</span> contentHtml = ReactDOMServer.renderToString(content)\n    <span class=hljs-keyword>return</span> <span class=hljs-string>`&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset="UTF-8"&gt;\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;\n  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;\n  &lt;title&gt;My website&lt;/title&gt;\n  <span class=hljs-subst>${renderContext.stylesheets}</span>\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id="app"&gt;<span class=hljs-subst>${contentHtml}</span>&lt;/div&gt;\n  <span class=hljs-subst>${renderContext.javascripts}</span>\n&lt;/body&gt;\n&lt;/html&gt;`</span>\n  }\n})\n</code></pre> <p>This module exports a <code>prerenderer</code>, which contains all the logic needed to turn each page into HTML files.</p> <h2>Building the static website</h2> <p>Now with the prerenderer in place, we can build our project into a static website! Run:</p> <pre><code class=language-bash>npm run build\n</code></pre> <p>You should see an output similar to this:</p> <pre><code>* Written build/browser/index.html (<span class=hljs-number>724</span>B)\n* Written build/browser/about/index.html (<span class=hljs-number>727</span>B)\n* Written build/browser/contact/index.html (<span class=hljs-number>729</span>B)\n* Written build/browser/<span class=hljs-number>404.</span>html (<span class=hljs-number>732</span>B)\n* Prerendered <span class=hljs-number>4</span> pages.\n</code></pre> <p>If you look in your <code>build/browser</code> directory, you will see all your pages are rendered into static HTML files!</p> <h2>Previewing the static website</h2> <p>Now, with the static website built, we can try serving it up using a static web server!</p> <pre><code class=language-bash>yarn global add http-server\nhttp-server build/browser\n</code></pre> <p>You can now upload files in <code>build/browser</code> to a static web host.</p> <p>Congratulations!</p> <p>You have set up a basic legendary-pancake project.</p> <h1>Next steps</h1> <ul> <li> <p>Learn <a href=./how-it-works.md>how legendary-pancake builds your page</a>.</p> </li> <li> <p>Add <a href=./css.md>CSS to your website</a>.</p> </li> <li> <p>Go back to <a href=./index.md>the index</a>.</p> </li> </ul> '}});